x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME}
  env_file:
    - .env  
  environment: &airflow-common-env
    PYTHONPATH: ${CONTAINER_CODE_PATH}
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}  
    AIRFLOW__CELERY__RESULT_BACKEND: ${AIRFLOW__CELERY__RESULT_BACKEND}  
    AIRFLOW__CELERY__BROKER_URL: ${AIRFLOW__CELERY__BROKER_URL}  
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}

  volumes:
    - ${HOST_CODE_PATH}/dags:${CONTAINER_CODE_PATH}/dags
    - ${HOST_CODE_PATH}/logs:${CONTAINER_CODE_PATH}/logs
    - ${HOST_CODE_PATH}/config:${CONTAINER_CODE_PATH}/config
    - ${HOST_CODE_PATH}/plugins:${CONTAINER_CODE_PATH}/plugins
    - ${HOST_CODE_PATH}/scripts:${CONTAINER_CODE_PATH}/scripts:rw
    - ${HOST_CODE_PATH}/configs:${CONTAINER_CODE_PATH}/configs:rw
    - ${HOST_CODE_PATH}/data:${CONTAINER_CODE_PATH}/data:rw
  
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
    - backend

services:

  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $DB_USER"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - backend

  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - backend

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - backend

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - backend

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - ${CONTAINER_CODE_PATH}:/opt/airflow
    networks:
      - backend

  redis_flags:
    image: redis:7.2
    container_name: redis_flags
    command: ["redis-server", "--databases", "2"]
    ports:
      - "6380:6379"
    volumes:
      - redis_flags_data:/data
    restart: unless-stopped
    networks:
      - backend

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml  
    ports:
      - "9090:9090"
    networks:
      - backend

  pushgateway:
    image: prom/pushgateway
    container_name: pushgateway
    ports:
      - "9091:9091"
    networks:
      - backend

  grafana:
    image: grafana/grafana
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin  
    ports:
      - "3000:3000"
    networks:
      - backend

  elasticsearch:
    image: elasticsearch:8.12.2     
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - backend

  kibana:
    image: kibana:8.12.2      
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - backend

  hits_processor:
    build:
      context: .
      dockerfile: Dockerfile.hits
    volumes:
      - ${HOST_CODE_PATH}:${CONTAINER_CODE_PATH}
    environment:
       - HOST_CODE_PATH=${HOST_CODE_PATH}
    command: ["python", "scripts/new_data_hits.py"]
    networks:
      - backend

  sessions_processor:
    build:
      context: .
      dockerfile: Dockerfile.sessions
    volumes:
      - ${HOST_CODE_PATH}:${CONTAINER_CODE_PATH}
    environment:
      - HOST_CODE_PATH=${HOST_CODE_PATH}
    command: ["python", "scripts/new_data_sessions.py"]
    networks:
      - backend

volumes:
  esdata:
  redis_flags_data:
  postgres-db-volume:

networks:
  backend:
    driver: bridge
