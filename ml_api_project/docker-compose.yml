services:
  web:
    build: .
    container_name: fastapi_app
    hostname: fastapi
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ${HOST_CODE_PATH}:${CONTAINER_CODE_PATH}
      - ${HOST_CODE_PATH}/app/tasks:${CONTAINER_CODE_PATH}/app/tasks:rw
    environment:
      - REDIS_URL=${REDIS_URL}
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_started  
    networks:
      - app-network

  worker:
    build: .
    container_name: celery_worker
    hostname: worker
    command: celery -A app.celery_app worker --loglevel=info -Q ml_tasks
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET=${MINIO_BUCKET}
    volumes:
      - ${HOST_CODE_PATH}:${CONTAINER_CODE_PATH}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network

  redis:
    image: redis:7
    container_name: redis
    hostname: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:        
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network

  minio:
    image: minio/minio:latest
    container_name: minio
    hostname: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - app-network

volumes:
  redis_data:
  minio_data:

networks:
  app-network:
    driver: bridge
